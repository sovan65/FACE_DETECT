import cv2



# Load the Haar cascade for face detection
face_cap = cv2.CascadeClassifier("C:/Users/Csesa/AppData/Roaming/Python/Python312/site-packages/cv2/data/haarcascade_frontalface_default.xml")
smile_cap = cv2.CascadeClassifier("C:/Users/Csesa/AppData/Roaming/Python/Python312/site-packages/cv2/data/haarcascade_smile.xml")

# Start video capture
video_cap = cv2.VideoCapture(0)

# Set the desired width and height for the webcam window
width = 800
height = 600
video_cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
video_cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)

while True:
    ret, video_data = video_cap.read()
    col = cv2.cvtColor(video_data, cv2.COLOR_BGR2GRAY)

    # Detect faces
    faces = face_cap.detectMultiScale(
        col,
        scaleFactor=1.1,
        minNeighbors=5,
        minSize=(30, 30),
        flags=cv2.CASCADE_SCALE_IMAGE
    )

    for (x, y, w, h) in faces:
        cv2.rectangle(video_data, (x, y), (x + w, y + h), (0, 255, 0), 5)  # Draw rectangle around face
        roi_gray = col[y:y + h, x:x + w]  # Region of interest for smile detection
        smiles = smile_cap.detectMultiScale(roi_gray, scaleFactor=1.8, minNeighbors=20)

        if len(smiles) > 0:
            cv2.putText(video_data, "Smiling Face", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)
            for (sx, sy, sw, sh) in smiles:
                cv2.rectangle(video_data, (x + sx, y + sy), (x + sx + sw, y + sy + sh), (255, 0, 0), 5)  # Draw rectangle around smile
        else:
            cv2.putText(video_data, "Angry Face", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)  # Text for angry face

    cv2.imshow("video_live", video_data)
    if cv2.waitKey(10) == ord("a"):
        break

video_cap.release()
cv2.destroyAllWindows()
